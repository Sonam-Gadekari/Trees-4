Time Complexity: O(n): n being the number of elements in input
Space Complexity: O(h): equivalent to O(logn) for stack space
Approach: Traverse to the left most element and check if its left and right matches p and q. 
In the initial traversal left most element will have null as its leaf nodes. Hence null will be returned. 
If left element is null and right element is null return null
If left element is not null and right element is null return left
If left element is null and right element is not null return right
If left element is not null and right element is not null return root
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root==null || root==p || root==q) return root;
        TreeNode left= lowestCommonAncestor(root.left, p, q);
        TreeNode right= lowestCommonAncestor(root.right, p, q);
        if(left==null && right==null) return null;
        if(left!=null && right==null) return left;
        if(right!=null && left==null) return right;
        return root;
    }
}