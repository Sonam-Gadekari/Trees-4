Time Complexity: O(log n): n being the number of elements in input
Space Complexity: O(h): equivalent to O(logn) for stack space
Approach: Given P and Q values.
If the value of p and q are higher than root then search right half of the tree.
If the value of p and q are lower than root then search left half of the tree.
Otherwise root will the output, because root left may have p or q , similarly root right may have p or q.
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root.val>p.val && root.val>q.val) return lowestCommonAncestor(root.left, p, q);
        else if(root.val<p.val && root.val<q.val) return lowestCommonAncestor(root.right, p, q);
        else return root;
    }
}